#!/usr/bin/python
# vim:ts=4:sw=4:tw=0:wm=0:et
# $Id: mr.py 190 2011-01-01 00:29:00Z harry $
# Created: 	     Thu 11 Nov 2010 08:49:38 PM CST
# Last modified: Fri 28 Dec 2012 07:55:35 PM CST

########################################################################

"""Process a .gpx file generated by GSAK to convert the ordered waypoints into
a <rte>"""

__version__ = "$Revision: 190 $".split()[1]
__date__    = "$Date: 2010-12-31 18:29:00 -0600 (Fri, 31 Dec 2010) $".split()[1]

########################################################################

import lxml.etree as ET
import os
import sys
import copy

########################################################################

def new_metadata( GPX, item, outname ):
    """Create a new <metadata> element to relace the one from the GSAK file
    @param GPX:  GPX namespace string
    @type GPX:   string
    @param item: the existing metadata item
    @type item:  lxlm.etree.Element
    """

    metadata = ET.Element( "metadata" )
    metadata.tail = "\n "
    metadata.text = "\n "

    meta_name = ET.Element( "name" )
    meta_name.tail = "\n  "
    meta_name.text = outname

    desc = ET.Element( "desc" )
    desc.tail = "\n  "
    desc.text = "Geocache file generated by the Python program 'mr.py' by roelsch"

    author = ET.Element( "author" )
    author.tail = "\n  "
    author.text = "\n   "

    name = ET.Element( "name" )
    name.tail = "\n   "
    name.text = "Robert L. Oelschlaeger"

    email = ET.Element( "email" )
    email.tail = "\n  "
    email.attrib[ "id"     ] = "roelschlaeger"
    email.attrib[ "domain" ] = "gmail.com"

    author.append( name )
    author.append( email )

    copyright = ET.Element( "copyright" )
    copyright.tail = "\n  "
    copyright.text = "\n   "

    year = ET.Element( "year" )
    year.tail = "\n   "
    year.text = "2010"

    license = ET.Element( "license" )
    license.tail = "\n  "
    license.text = ""

    copyright.attrib[ "author" ] = "Robert L. Oelschlaeger"
    copyright.append( year )
    copyright.append( license )

#   link = ET.Element( "link" )
#   link.tail = "\n  "
#   link.text = "\n"

    # get other fields from the old record
    time = item.find( GPX + "time" )
    keywords = item.find( GPX + "keywords" )
    bounds   = item.find( GPX + "bounds" )

    # now put the entire <metadata> element together
    metadata.append( meta_name )
    metadata.append( desc )
    metadata.append( author )
    metadata.append( copyright )
#   metadata.append( link )
    metadata.append( time )
    metadata.append( keywords )
    metadata.append( bounds )

    return metadata

########################################################################

def process_arg( arg, options ):

    route_dir, route_file = os.path.split( arg )
    route_name, route_ext = os.path.splitext( route_file )
    route_label= route_name + "_route"
    outname = os.path.join( route_dir, route_label + ".gpx" )

    GPX_NAMESPACE = "http://www.topografix.com/GPX/1/1"
#   GPX_NAMESPACE = "http://www.topografix.com/GPX/1/0"

    tree = ET.parse( arg )
    root = tree.getroot()

    # verify we have the right namespace
    root_namespace = root.tag[1:-4]
    if not root_namespace == GPX_NAMESPACE:
        print >> sys.stderr, "Namespace %s mismatch, will try using %s" % ( GPX_NAMESPACE, root_namespace )
        GPX_NAMESPACE = root_namespace

    GPX = "{%s}" % GPX_NAMESPACE
    LABEL_NAMESPACE = "http://www.topografix.com/GPX/gpx_overlay/0/3"
    LABEL = "{%s}" % LABEL_NAMESPACE

    tree = ET.parse( arg )
    root = tree.getroot()
    wpts = root.findall( GPX + "wpt" )
#   print >> sys.stderr, str( wpts )

    NSMAP = {
            None : GPX_NAMESPACE,       # the default namespace (no prefix)
#           "ol" : LABEL_NAMESPACE,
            }

    gpx = ET.Element(GPX + "gpx", nsmap=NSMAP) # lxml only!
    gpx.tail = "\n"
    gpx.text = "\n"
    gpx.attrib[ "creator" ] = "'mr.py' by roelsch"
    gpx.attrib[ "version" ] = "%s, %s" % ( __version__, __date__ )

    # copy the children from the original GSAK file
    for item in root:

        if item.tag == (GPX + "metadata"):
            item = new_metadata( GPX, item, outname )

#       # except for the <desc> tag
#       if item.tag == (GPX + "desc"):
#           item.text = "Geocache route file generated by 'mr.py'"

        gpx.append( item )

    # now create the <rte> element
    # <rte>
    #  <name/>
    #  <cmt/>
    #  <desc/>
    #  <link/>
    #  <number/>
    #  <type/>
    #  <extensions>
    #   <label>
    #    <label_text/>
    #   </label>
    #  </extensions>
    #  <rtept/>
    # </rte>
    rte = ET.Element( GPX + "rte" )
    rte.tail = "\n"
    rte.text = "\n "

    name = ET.Element( GPX + "name" )
    name.tail = "\n "
    name.text = route_name
    rte.append( name )

    cmt = ET.Element( GPX + "cmt" )
    cmt.tail = "\n "
    cmt.text = "cmt"
    rte.append( cmt )

    desc = ET.Element( GPX + "desc" )
    desc.tail = "\n "
    desc.text = "description"
    rte.append( desc )

    src = ET.Element( GPX + "src" )
    src.tail = "\n "
    src.text = "src"
    rte.append( src )

    link = ET.Element( GPX + "link" )
    link.tail = "\n "
#   link.text = "link"
    rte.append( link )

    number = ET.Element( GPX + "number" )
    number.tail = "\n "
    number.text = "1"
    rte.append( number )

    xtype = ET.Element( GPX + "type" )
    xtype.tail = "\n "
    xtype.text = "topo_route"
    rte.append( xtype )

    extensions = ET.Element( GPX + "extensions" )
    extensions.text = "\n  "
    extensions.tail = "\n "

    label = ET.Element( LABEL + "label", nsmap={ None : LABEL_NAMESPACE } )
    label.tail = "\n "
    label.text = "\n  "

    label_text = ET.Element( LABEL + "label_text" )
    label_text.tail = "\n  "
    label_text.text = route_label

    label.append( label_text )
    extensions.append( label )
    rte.append( extensions )

    for wpt in wpts:

        rtept = copy.deepcopy( wpt )
        rtept.tag = GPX + "rtept"
        rte.append( rtept )

    gpx.append( rte )

    outfile = open( outname, "wb" )
    outfile.write( ET.tostring( gpx, pretty_print=True ) )
    outfile.close()

    print "output is in %s" % outname

########################################################################

if __name__ == "__main__":

    ########################################################################

    def main( args, options ):
        """process each of the command line arguments"""

        for arg in args:
            process_arg( arg, options )

    ########################################################################

    from optparse import OptionParser
    import sys

    USAGE = "%prog { options }"
    VERSION = "Version: %(version)s, %(date)s" % {
        "version"   :   __version__,
        "date"      :   __date__,
    }

    PARSER = OptionParser( usage=USAGE, version=VERSION )

    PARSER.add_option("-d",
        "--debug",
        dest="debug",
        action="count",
        help="increment debug counter")

    ( OPTIONS, ARGS ) = PARSER.parse_args()

    if not ARGS:

#       ARGS = [ "temp.gpx" ]

        import EasyDialogs

        INPUT_FILE = EasyDialogs.AskFileForOpen(
            "Select a .gpx file",
            [
                (   "Geographic files (*.gpx)", '*.gpx'),
                (   "All files (*.*)",          '*.*'),
            ],
            defaultLocation="*.gpx",
            windowTitle="Open a .gpx file for processing",
        )

        if INPUT_FILE:
            ARGS = [ INPUT_FILE ]

        else:
            PARSER.print_usage()
            sys.exit( 2 )

    main( ARGS, OPTIONS )

########################################################################
