# vim:ts=4:sw=4:tw=0:wm=0:et:noic

from build_path import build_paths
from collections import OrderedDict
import datetime
from get_data_from_wpt import get_data_from_wpt
from json import loads
from make_rte import make_rte
from xmltodict import unparse

########################################################################


def make_metadata(doc):
    keys = [
        "name",
        "desc",
        "author",
        "copyright",
        "link",
        "time",
        "keywords",
        "bounds",
        "extensions"
    ]
    metadata = OrderedDict.fromkeys(keys)

    # reference the old metadata
    ref = doc["gpx"]["metadata"]

    # build new metadata
    metadata["desc"] = f"Route file generated by {__file__}"
    metadata["author"] = {
        "name": "Robert L. Oelschlaeger",
        "email": {"id": "roelsch2009", "domain": "gmail.com"}
    }
    metadata["copyright"] = {"author": "Robert L. Oelschlaeger", "year": 2018}
    metadata["time"] = datetime.datetime.isoformat(datetime.datetime.utcnow())
    metadata["keywords"] = ref["keywords"]
    metadata["bounds"] = ref["bounds"]

    for key in keys:
        if metadata[key] is None:
            del metadata[key]

    return metadata


########################################################################


def make_route_gpx(
    json_filename,
    outfile=None,
    debug=False,
    waypoint_flag=True
):

    print(f"Reading from {json_filename}")
    with open(json_filename, "rb") as jsonfile:
        doc = loads(jsonfile.read())

    make_metadata(doc)
#   import sys
#   sys.exit(0)

    gpx = doc["gpx"]
    wpt = gpx["wpt"]

    data = get_data_from_wpt(wpt)
    results = build_paths(data)

    rte = []
    for start, end, waypoints in results:
        if debug:
            print()
            print("From: %s" % str(data[start]))
            if waypoints:
                for waypoint in waypoints:
                    print("    : %s" % str(data[waypoint]))
            print("  To: %s" % str(data[end]))

        # construct a route from its constituent waypoints
        rtepoint_list = []
        for wpt_index in [start] + waypoints + [end]:
            rtepoint_list.append(wpt[wpt_index])

        usersort = wpt[end]["extensions"]["gsak:wptExtension"]["gsak:UserSort"]
        name = "%s: %s" % (usersort, wpt[end]["name"])
        desc = wpt[end]["desc"]
        link = wpt[end]["link"]
        cmt = "From %s to %s" % (wpt[start]["name"], wpt[end]["name"])
        result = make_rte(
            rtepoint_list,
            name=name,
            cmt=cmt,
            desc=desc,
            link=link
        )
        rte.append(result)

    new_metadata = make_metadata(doc)
    doc["gpx"]["metadata"] = new_metadata

    if waypoint_flag:
        # remove waypoints
        print("Removing 'wpt'")
        del gpx["wpt"]

    # add route points
    gpx["rte"] = rte

    # generate an output filename based on the input filename
    if outfile:
        outfilename = outfile
    else:
        outfilename = json_filename.replace(".json", " route.gpx")

    # write the output file
    with open(outfilename, "wb") as outputfile:
        unparse(doc, pretty=True, output=outputfile)
        print(f"Route written to \"{outfilename}\".")


########################################################################

if __name__ == "__main__":

    import argparse

    JSON_FILENAME = "outfile.json"

    parser = argparse.ArgumentParser(
        description="Convert .json file to routes .gpx file",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    parser.add_argument(
        "inputfile",
        type=str,
        nargs="?",
        help="JSON input filename",
    )

    parser.add_argument(
        "-o",
        "--outfile",
        type=str,
        nargs="?",
        help="""GPX output filename, default: "{inputfile} route.gpx\"""",
    )

    parser.add_argument(
        "-d",
        "--debug",
        action="store_true",
        help="set debug flag",
    )

    parser.add_argument(
        "-w",
        "--waypoints",
        action="store_false",
        help="remove wpt section",
    )

    parser.set_defaults(
        inputfile=JSON_FILENAME
    )

    args = parser.parse_args()

    make_route_gpx(
        args.inputfile,
        outfile=args.outfile,
        debug=args.debug,
        waypoint_flag=args.waypoints
    )

# end of file
